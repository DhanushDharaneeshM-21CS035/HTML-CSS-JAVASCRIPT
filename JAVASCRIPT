Comment in Javascript Code:
            -> Comments are lines of code that Javascript will intentionally ignore.
            -> They’re just used to create notes for yourself and others about what the code does
            -> // : makes an in-line comment
            -> Eg : // in-line comment example   : This is inline comment
            -> Eg : /* this is a multiline
                       comment line 1     : This multi-line comment
                       line 2
                       line 3 */
            -> We can have multiple lines in multiline comment.

Data types and variables:
            -> Data is anything that is meaningful to the computer.
            -> Javascript provides seven different data types
            -> Data Types:
                     Undefined, Null, Boolean, String, Symbol, Number, and Object.
            Undefined:
                  -> It is something that hasn’t been defined.
                  -> It may have a variable that haven’t set to be anything yet
            Null:
                -> Null means nothing.
            Boolean:
                -> A boolean means true or false
            Symbol:
                -> A symbol is an immutable primitive value that is unique.
            String:
                -> A string is just any sort of text
            Number:
                -> A number is a number.
            Object:
                -> An object can store a lot of different key value pairs.
            -> Varaibles:
                    -> A variable allows computers to store and manipulate data in a dynamic fashion.
                    -> It’s basically a label to point to the data.
                    -> To declare a variable, one way is to use the var keyword.
                    -> Var stands for variable
                    -> Eg : var myname = "Javascript"   : this is string datatype
                    -> There are actually three ways to declare a variable in Javascript.
                              1) var myname = "Javascript"   : A var is going to be able to be used throughout your whole program.
                              2) let ourname = "JS"   : Let will only be used within the scope of where you declared that.
                              3) const pi = 3.14   : Const is a variable that should never change. It can never change.
                    
Storing Values with Assignment Operator:
                    -> There’s a difference between declaring variables and assigning variables.
                    -> Eg : var a;   : Here it is declaring a variable to be called a.
                            var b = 2;   : Here it is declaring and assigning in one line.
                    -> And then the equals sign is the assignment operator.        
                    -> Eg : a = 7   : we've assigned a to be 7
                            b = a   : now assigned the contents of a to b.

-> console.log(content)  : It allows you to see the content in the console. 

Initializing Variables w/ Assignment Operator:
                        -> var a = 9;   : This ia an example of initializing value and declaring it same time.
                        -> The var a is declaring it. And the a = 9 is initializing it with the assignment operator, which is the = sign.
                        
Uninitialized Variables:
            -> Uninitialized that means their value is undefined.
            -> Eg : var a;   : Uninitialized Variables

Case Sensitivity in Variables:
            -> Variable names and function names in Javascript are case sensitive.
            
-> + : Adding numbers 
   Eg : var sum = 10 + 10;
-> - : Subtracting Numbers
   Eg : var sub = 50 - 10;
-> * : Multiplying Numbers   
   Eg : var mul = 50 * 10;
-> / : Dividing Numbers             
   Eg : var div = 50 / 10;             
-> myVar++; : Incrementing Numbers             
-> myVar--; : Decrementing Numbers
-> var myDecimal = 0.009;  : Decimal Numbers or are sometimes referred to as floating point numbers or floats
-> var product = 2.0 * 2.5; : Multiply Decimals
-> var quotient = 0.0 / 2.0; : Divide Decimals
-> var reminder = 11 % 3; : used to finding a Remainder
-> a += 12; : Compound Assignment with Augmented Addition
-> a -= 10; : Compound Assignment with Augmented Subtraction
-> a *= 10; : Compound Assignment with Augmented Multiplication
-> a /= 10; : Compound Assignment with Augmented Division

Declare String Variables:
            -> If we have some characters surrounded by quotation marks, they can either be single quotation marks, double quotation marks, or backticks then it’s a string.
            -> These are called "String literals”.
            -> Eg : var firstName = "Javascript";
            
Escaping Literal Quotes in Strings:
                 -> \  : This is  escape character
                 -> Eg : var myStr = "I am a \"double quoted\" string inside \"double quotes\"";
                    console.log(myStr);
                    Output : I am a "double quoted" string inside "double quotes"
                    
Quoting String with Single Quotes:
               -> Instead of having string start with double quotes, have can start it with a single quote.
               -> A string can either be surrounded by ‘single quotes’ or “double quotes”
               -> Eg : var myStr = '<a href="http://www.example.com" target="_blank">Link</a>'

-> `...` : backticks  : -> This can be put at the beginning and the end of the string.
                        -> Now with this we can actually use single quotes and double quotes both within the string.
                        
Escape Sequences in Strings:
            -> \'  : single quote
            -> \"  : double quote
            -> \\  : backslash
            -> \n  : newline
            -> \r  : carriage return
            -> \t  : tab
            -> \b  : backspace
            -> \f  : form feed

Concatenating String with Plus Operator:
                        -> We can concatenate strings with the + operator.
                        -> Eg : var ourStr = "I come first. " + "I come second.";   
                                console.log(ourStr);
                                Output : I come first. I come second.
Concatenating Strings with Plus Equals Operator:
                      -> We can also concatenate strings using the += operator.
                      -> -> Eg : var ourStr = "I come first. "; 
                                 ourStr += "I come second.";   
                                 console.log(ourStr);
                                 Output : I come first. I come second.  

Constructing String with Variables:
                    -> We can concatenate strings together with variables.    
                    -> Eg : var myName = "Beau";
                            myStr = "My name is " + myName + " and I am well!";
                            console.log(myStr);
                            Output : My name is Beau and I am well!

Appending Variables to Strings:
                     -> We can append variables to strings with this += operator.
                     -> Eg : var ourStr = "worthwhile";
                             var myStr = "Learning to code is ";
                             myStr += ourStr;
                             console.log(myStr);
                             Output : Learning to code is worthwhile

Find Length of String:
            -> We just use the .length property to find the length.
            -> Eg : var nameLength = 0;
                    var name = "Javascript";
                    nameLength = name.length;
                    console.log(nameLength);
                    Output : 10

Bracket Notation to Find First Character in String:
                        -> Bracket notation is a way to get a character at a specific index within a string.
                        -> The number 0, that refers to first index of the string. 
                        -> Eg : var firstLetter = "";
                                var lastName = "Java";
                                firstLetter = lastName[0];
                                console.log(lastName);
                                Output : "J"

String Immutability:
            -> Strings are immutable, meaning they cannot be altered once created.
            -> This does not mean that they cannot be changed, just that the individual characters of a string literal cannot be changed.
            -> Eg : var mystr = "Jello World";
                    mystr[0] = "H";  : This will show ERROR because of the immutability of strings.
                    Corret way is:
                    mystr = "Hello World";
                    
Bracket Notation to Find Last Character in String:
                     -> We can also use bracket notation to find the last letter in a string
                     -> Eg : var name = "Java";
                             var lastletter = name[name.length - 1];
                             console.log(lastletter);
                             Output : "a"
                     
Arrays:
       -> Arrays allow you to store several pieces of data in one place.
       -> We can store Multiple Values in array
       -> Arrays always start with a bracket and then end with a bracket to show the beginning and ending of the array.
       -> Every element in the array is separated by a comma.
       -> The elements in an array can be any of data type.
       -> Eg : var myarray = ["Java", 1];
                      
Nested Arrays:
          -> When one of the elements in an array is another array, that’s called a nested array or a multidimensional array 
          -> Eg : var myarray = [["Java",1],["Css",2]];
          
Accesses Array Data with Indexes:
            -> Array elements can be accessed using their index.
            -> Array index starts with 0 always and have n-1 indexes.
            -> Eg : var myarr = [10,20,30];
                    var number = myarr[0];
                    console.log(number);
                    Output : 10

Modify Array Data With Indexes:
             -> We can use array indexes to modify arrays.
             -> Eg : var myarr = [10,20,30];
                     myarr[0] = 40;
                     console.log(myarr);
                     Output : [40, 20, 30]

Access Multi-Dimensional Arrays With Indexes:
                    -> We can also use bracket notation to select an element in a multi-dimensional or array of arrays. 
                    -> Eg : var myarr = [[1,2,3],[4,5,6],[7,8,9]];
                            var number = myarr[0][0]  : In this the first index refers to the outer array and the second index refers to the inner array or the nested array elements.
                            console.log(number);
                            Output : 1

Manipulate Arrays with push():
                 -> We can have pinned data to the end of an array with the push function.       
                 -> The push function is used to push elements or another array in the end of the taken array
                 -> Eg : var myarr = [["Java", 1],["CSS" ,2]];
                         myarr.push(["Javascript", 3]);

Manipulate Arrays with pop():
            -> We can remove an item from an array with the pop() function.
            -> pop() : it’s going to remove the last element in the array
            -> Eg : var myarr = [["Java", 1],["CSS" ,2]];
                    var remele = myarr.pop();
                    console.log(remele);
                    Output : ["CSS", 2]

Manipulate Arrays with shift():
            -> The shift function is very similar to the pop function except it removes the first element of the array instead of the final element.
            -> Eg : var myarr = [["Java", 1],["CSS" ,2]];
                    myarr.shift();   : After this the first element will be ["CSS", 2]
                    
Manipulate Arrays with unshift():
                        -> The unshift() function is similar to the push() array function. While push() adds an element to the end of the array, unshift() adds at element to the beginning of the array.
                        -> Eg : var myarr = [["Java", 1],["CSS" ,2]];
                                myarr.unshift(["Javascript", 3]); : ["Javascript", 3] This will be add in beginning of the array and other elements will be shifted to next positon
                                
                                
Functions:
       -> Functions allow us to create reusable code in Javascript.
       -> There’s always parenthesis and we can pass information into the parenthesis.
       -> And everything inside the curly bracket is run anytime the function is called or invoked.
       -> The function is being called by just putting the function name with parenthesis after the name.
       -> Eg : function reusableFunction(){       : This a function with reuableFunction as function name
                        console.log("Hi World");
               }
               reusableFunction();   : This is the function call statement.
               
Passing Values to Functions with Arguments:
                        -> Parameters are variables that act as place holders for the values that are to be input to a function when it is called.
                        -> Eg : function reusableFunction(a ,b){   
                                    console.log(a-b);
                                }
                                reusableFunction(10, 5);   : Here the function is  passing the values 

Global Scope and Functions:
            -> Scope refers to the visibility of variables.
            -> Variables which are defined outside of a function block have global scope.
            -> Global scope means they can be seen everywhere in your Javascript code
            
Local Scope and Functions:
            -> Variables which are declared within a function as well as the function parameters have local scope.
            -> Eg :  function myLocalScope(){
                        var myVar= 5;
                        console.log(myVar);  : No error Output:  //5
                     }
                     myLocalScope();
                     console.log(myVar);  : there’s an error because it tried to access myVar outside of the function.
  
Global vs Local Scope in Functions:
            -> It is possible to have both local and global variables with the same name. When we do this, the local variable takes precedent over the global variable.
            
Boolean Values:
            -> Booleans are another datatype in Javascript.
            -> There are only two values, true or false

If Statements:
         -> An if statement is used to make decisions in code   
         -> The keyword If tells Javascript to execute the code in the curly braces under certain conditions defined in the parenthesis.
         -> There’s always parenthesis after the keyword if
         -> If the stuff inside these parenthesis evaluates to true, then the code within these curly braces will be evaluated or run.
         -> Eg : function trueOrFalse(wasTrue){
                        if(wasTrue){
                            return "Yes";
                        }
                        return "No";
                 }
                 consle.log(trueOrFalse(true));   : Output: Yes
     
Equality Operator]:
           -> There are many comparison operators in Javascript that will return a Boolean of true or false the most common is the equality operator
           -> Equality operator which is the double equal == sign
           -> Eg : var val = 10;
                   if(val == 10) return true;  : Output : true
                   if(3 ==='3') : output : true 
Strict Equality Operator:
            -> The strict equality operator, the triple equal sign ===.
            -> the double equals sign attempts to convert both values being compared to a common type while the strict equality operator does not do the type conversion
            -> Eg : if(3 === 3)  : Output : true
                    if(3 ==='3') : output : false
                    
Inequality Operator:
            -> Inequality operator which is basically the opposite of the equality operator.
            -> != : Inequality operator
            -> Eg : var val = 10;
                    if(val != 1) return true;  : Output : true

Strict Inequality Operator:
            -> The strict inequality operator is basically the opposite of the strict equality operator.
          
Logical Operator:
           -> >   : greater than operator
           -> >=  : greater than or equal to operator
           -> <   : Less than Operator
           -> <=  : Less Than Or Equal To Operator
           -> &&  : Logical And Operator
           -> ||  : Logical Or Operator
           
Else Statements:
            -> When an if statement is true, normally the block of code right after the if statement will be evaluated and if it’s not true, nothing happens. But with an else statement, an alternate block of code can be executed when it’s not true.
            -> Eg : if(val >5){
                        console.log("Bigger than 5");
                    }else{
                        console.log("5 or Smaller");
                    }

Else If Statements:
            -> If you have multiple conditions that need to be addressed, you can use else if statements.
            -> Eg : if(val >10){
                        console.log("Greater than 10");
                    }if(val < 5){
                        console.log("Smaller than 5");
                    else{
                        console.log("Between 5 and 10");
                    }

Switch Statements:
            -> A switch statement tests a value and can have many case statements which define various possible values.
            -> Switch is a keyword
            -> Default Option in Switch Statements : This is like the else statement.
            -> Eg : switch(val){            : This is an example of a switch case
                        case "a":
                             answer = "apple";
                             break;
                        case "b":
                             answer = "bird";
                             break;
                        case "c":
                             answer = "cat";
                             break;
                        default:             : This is an default case
                             answer = "stuff";
                             break;  
                     }return answer;    
          
